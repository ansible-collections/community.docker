---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- block:
    - name: Make sure we're not already using Docker swarm
      community.docker.docker_swarm:
        state: absent
        force: true

    - name: Try to get docker_node_info when docker is not running in swarm mode
      community.docker.docker_node_info:
      ignore_errors: true
      register: output

    - name: assert failure when called when swarm is not in use or not run on manager node
      ansible.builtin.assert:
        that:
          - 'output is failed'
          - 'output.msg == "Error running docker swarm module: must run on swarm manager node"'

    - name: Create a Swarm cluster
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"
      register: output

    - name: assert changed when create a new swarm cluster
      ansible.builtin.assert:
        that:
          - 'output is changed'
          - '(output.actions[0] | regex_search("New Swarm cluster created: ")) is truthy'
          - 'output.swarm_facts.JoinTokens.Manager is truthy'
          - 'output.swarm_facts.JoinTokens.Worker is truthy'

    - name: Try to get docker_node_info when docker is running in swarm mode and as manager
      community.docker.docker_node_info:
      register: output

    - name: assert reading docker swarm node facts
      ansible.builtin.assert:
        that:
          - 'output.nodes | length > 0'
          - 'output.nodes[0].ID is string'

    - name: Try to get docker_node_info using the self parameter
      community.docker.docker_node_info:
        self: true
      register: output

    - name: assert reading swarm facts with list of nodes option
      ansible.builtin.assert:
        that:
          - 'output.nodes | length == 1'
          - 'output.nodes[0].ID is string'

    - name: Get local docker node name
      ansible.builtin.set_fact:
        localnodename: "{{ output.nodes[0].Description.Hostname }}"


    - name: Try to get docker_node_info using the local node name as parameter
      community.docker.docker_node_info:
        name: "{{ localnodename }}"
      register: output

    - name: assert reading reading swarm facts and using node filter (random node name)
      ansible.builtin.assert:
        that:
          - 'output.nodes | length == 1'
          - 'output.nodes[0].ID is string'

    - name: Create random name
      ansible.builtin.set_fact:
        randomnodename: "{{ 'node-%0x' % ((2**32) | random) }}"

    - name: Try to get docker_node_info using random node name as parameter
      community.docker.docker_node_info:
        name: "{{ randomnodename }}"
      register: output

    - name: assert reading reading swarm facts and using node filter (random node name)
      ansible.builtin.assert:
        that:
          - 'output.nodes | length == 0'

  always:
    - name: Cleanup
      community.docker.docker_swarm:
        state: absent
        force: true
